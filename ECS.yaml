AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.
Parameters:
  env:
    Type: "String"
    Default: "alpha"

Resources:
  ecsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "archipelago-ecs-vpc"
        - Key: Project
          Value: !Sub "archipelago-ecs"

  ecsInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "archipelago-ecs-InternetGateway"
        - Key: Project
          Value: !Sub "archipelago-ecs"

  ecsVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ecsInternetGateway
      VpcId: !Ref ecsVPC

  ecsPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ecsVPC
      Tags:
        - Key: Name
          Value: !Sub "archipelago-ecs-RouteTable"
        - Key: Project
          Value: !Sub "archipelago-ecs"

  ecsPublicRoute:
    DependsOn: ecsVPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ecsPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ecsInternetGateway

  ecsPublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2a
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: ecsVPC
      Tags:
        - Key: Name
          Value: !Sub "archipelago-ecs-PublicSubnet01"
        - Key: Project
          Value: !Sub "archipelago-ecs"

  ecsPublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-2b
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: ecsVPC
      Tags:
        - Key: Name
          Value: !Sub "archipelago-ecs-PublicSubnet02"
        - Key: Project
          Value: !Sub "archipelago-ecs"

  ecsPublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ecsPublicSubnet01
      RouteTableId: !Ref ecsPublicRouteTable

  ecsPublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ecsPublicSubnet02
      RouteTableId: !Ref ecsPublicRouteTable

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "archi-${env}-cluster"

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "archi-${env}-execution-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "archi-${env}-task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "archi-${env}-auto-scaling-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "archi-${env}-container-security-group"
      VpcId: !Ref ecsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "archi-${env}-load-balancer-security-group"
      VpcId: !Ref ecsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ServicePackageService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTPSPackageService
    Properties:
      ServiceName: !Sub "archi-${env}-package-service"
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinitionPackageService
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref ecsPublicSubnet01
            - !Ref ecsPublicSubnet02
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: "package-service"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupPackageService

  TaskDefinitionPackageService:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroupPackageService
    Properties:
      Family: !Sub "archi-${env}-td-package-service"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: "package-service"
          Image: "075174350620.dkr.ecr.us-west-2.amazonaws.com/package-service:latest"
          PortMappings:
            - ContainerPort: 8080
          # Send logs to CloudWatch Logs
          Environment:
            - Name: APPLICATION_STAGE
              Value: !Sub "${env}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: "us-west-2"
              awslogs-group: !Ref LogGroupPackageService
              awslogs-stream-prefix: ecs

  TargetGroupPackageService:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: "/health-check"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 10
      HealthyThresholdCount: 2
      Name: !Sub "archi-${env}-package-service-tg"
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300 # default is 300
      TargetType: ip
      VpcId: !Ref ecsVPC

  ListenerHTTPSPackageService:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupPackageService
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerPackageService
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: "arn:aws:acm:us-west-2:075174350620:certificate/98d833af-10ad-495f-95f3-c5eae4af747d"

  LoadBalancerPackageService:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Sub "archi-${env}-package-service-lb"
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref ecsPublicSubnet01
        - !Ref ecsPublicSubnet02

  AutoScalingTargetPackageService:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 2
      ResourceId:
        !Join ["/", [service, !Ref Cluster, !GetAtt ServicePackageService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicyPackageService:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "archi-${env}-package-service-asp"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTargetPackageService
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 75

  LogGroupPackageService:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["", [/ecs/, "package-server", TaskDefinition]]
